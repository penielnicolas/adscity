// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  phone       String        @unique
  emailVerified Boolean     @default(false)
  phoneVerified Boolean     @default(false)
  warnedBeforeDeactivation Boolean @default(false)
  password    String
  firstName   String
  lastName    String
  avatar      String?
  isActive    Boolean       @default(true)
  role        UserRole      @default(USER)
  loginCount  Int      @default(0)
  lastLogin   DateTime?
  loginAttempts     Int     @default(0)
  lockUntil   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Location
  country     String?
  city        String?
  address     String?
  workAddress String?

  // PrÃ©fÃ©rences

  // Relations
  sessions    Session[]
  profiles    Profile[]
  shops       Shop[]        // boutiques crÃ©Ã©es par lâ€™utilisateur
  posts       Post[]          // annonces publiÃ©es par lâ€™utilisateur
  postAudiences PostAudience[]
  notifications    Notification[]
  verificationToken VerificationToken[]
  verifyCodes      VerificationCode[]
  activityLogs   ActivityLog[]
  supportTickets Ticket[]
  ticketMessages TicketMessage[]
  emails   Email[]
}

model Profile {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  type        ProfileType @default(STANDARD)
  displayName String?
  bio         String?
  avatar      String?
  createdAt   DateTime @default(now())

  stories Story[]
  notifications PushNotification[]

  // Si c'est un BUSINESS â†’ relation boutique(s)
  shops       Shop[]
  following Follow[] @relation("FollowFollower")
  followers Follow[] @relation("FollowTarget")
}

model Follow {
  id String @id @default(uuid())
  followerProfileId String
  targetProfileId String
  createdAt DateTime @default(now())

  follower Profile @relation("FollowFollower", fields: [followerProfileId], references: [id])
  target   Profile @relation("FollowTarget",   fields: [targetProfileId],   references: [id])

  @@unique([followerProfileId, targetProfileId])
}

model Shop {
  id          String     @id @default(uuid())
  name        String
  description String?
  avatar      String?
  banner      String?
  slug        String   @unique
  category    String
  status      ShopStatus @default(PENDING)
  ownerId     String
  owner       User       @relation(fields: [ownerId], references: [id])

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  profileId   String?     
  profile     Profile?    @relation(fields: [profileId], references: [id])

  posts       Post[]
}

model Post {
  id          String     @id @default(uuid())
  details     Json       @default("{}")
  items       Json       @default("{}")
  location    Json       @default("{}")
  authorId    String
  shopId      String?    // Optionnel : null si annonce perso
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  moderatedAt DateTime?
  expiresAt   DateTime?

  rejectionReason   String?

  author      User       @relation(fields: [authorId], references: [id])
  shop        Shop?      @relation(fields: [shopId], references: [id])

  audience    PostAudience[]
  isActive    Boolean    @default(false)
  status      PostStatus  @default(PENDING)

  visibility  PostVisibility   @default(PUBLIC)

  categoryId  String?
  category    PostCategory? @relation("CategoryPosts", fields: [categoryId], references: [id])
  subcategory String?

  views       PostView[]
  clicks      PostClick[]
  images      PostImage[]
  likes       PostLike[]
  shares      PostShare[]
  comments    PostComment[]
  reviews     PostReview[]
  reports     PostReport[]
}

model PostCategory {
  id            String               @id @default(uuid())
  name          String
  slug          String               @unique
  icon          String?              // IcÃ´ne CSS ou URL
  image         String?              // Image illustrative
  parentId      String?              
  parent        PostCategory?     @relation("CategoryChildren", fields: [parentId], references: [id])
  children      PostCategory[]    @relation("CategoryChildren")

  posts         Post[]            @relation("CategoryPosts")

  isSensitive Boolean              @default(false)

  formSchema  Json?
  
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
}

model PostView {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  userId     String?
  postId     String

  post       Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) // ðŸ”’ EmpÃªche les doublons cÃ´tÃ© base
  @@map("views")
}

model PostClick {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  userId     String?
  postId     String

  post       Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) // ðŸ”’ EmpÃªche les doublons cÃ´tÃ© base
  @@map("clicks")
}

model PostImage {
  id            String @id @default(uuid())
  userId        String
  order         Int    @default(0)
  isMain        Boolean  @default(false)
  thumbnails    String?  // JSON des URLs des miniatures
  uploadedAt    DateTime @default(now())
  updatedAt     DateTime @updatedAt

  postId        String
  post          Post @relation(fields: [postId], references: [id], onDelete: Cascade)
 
  @@map("post_images")
  @@index([postId])
  @@index([isMain])
}

model PostShare {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  userId      String?
  postId      String

  post        Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) // ðŸ”’ EmpÃªche les doublons cÃ´tÃ© base
  @@map("shares")
}

model PostLike {
  id        String   @id @default(uuid())
  createdAt  DateTime @default(now())
  userId    String?
  postId String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) // ðŸ”’ EmpÃªche les doublons cÃ´tÃ© base
  @@map("likes")
}

model PostComment {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  userId     String?
  postId     String

  post     Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) // ðŸ”’ EmpÃªche les doublons cÃ´tÃ© base
  @@map("comments")
}

model PostReview {
  id        String   @id @default(uuid())
  createdAt  DateTime @default(now())
  userId    String?
  postId String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) // ðŸ”’ EmpÃªche les doublons cÃ´tÃ© base
  @@map("reviews")
}

model PostReport {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String?
  postId    String
  reason    String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) // ðŸ”’ EmpÃªche les doublons cÃ´tÃ© base
  @@map("reports")
}

model Notification {
  id           String              @id @default(uuid())
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  type         NotificationType
  status       DeliveryStatus      @default(PENDING)
  payload      Json
  createdAt    DateTime            @default(now())
  readAt       DateTime?
  
  @@index([userId, status, createdAt])
}

model VerificationCode {
  id        String   @id @default(uuid())
  code      Int   // Le code Ã  6 chiffres
  type      CodeType // Type de code (EMAIL_VERIFICATION, PASSWORD_RESET, etc.)
  email     String   // Email associÃ©
  userId    String?  // Utilisateur associÃ© (optionnel)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  attempts  Int      @default(0)  // Nombre de tentatives
  maxAttempts Int    @default(3)  // Nombre max de tentatives
  isUsed    Boolean  @default(false)
  expiresAt DateTime // Date d'expiration
  createdAt DateTime @default(now())
}

model VerificationToken {
  id        String   @id @default(uuid())
  type      VerificationType @default(EMAIL_VERIFICATION)
  token     String   @unique
  userId    String?  // Utilisateur associÃ© (optionnel)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime // Date d'expiration
}

model ActivityLog {
  id          String   @id @default(uuid())
  userId      String
  action      String
  description String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}

model Story {
  id        String @id @default(uuid())
  profileId String
  profile   Profile @relation(fields:[profileId], references:[id])
  mediaUrl  String
  caption   String?
  expiresAt DateTime // 24h
  createdAt DateTime @default(now())
  views     StoryView[]
  clicks     StoryClick[]
  @@index([profileId, expiresAt])
}

model StoryView {
  id        String   @id @default(uuid())
  createdAt  DateTime @default(now())
  userId    String?
  storyId String

  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([storyId, userId]) // ðŸ”’ EmpÃªche les doublons cÃ´tÃ© base
  @@map("story_views")
}

model StoryClick {
  id        String   @id @default(uuid())
  createdAt  DateTime @default(now())
  userId    String?
  storyId String

  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([storyId, userId]) // ðŸ”’ EmpÃªche les doublons cÃ´tÃ© base
  @@map("story_clicks")
}

model PushSubscription {
  id         String   @id @default(cuid())
  endpoint   String   @unique
  p256dh     String
  auth       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PushNotification {
  id String @id @default(uuid())
  profileId String // destinataire
  type PushNotificationType // NEW_LISTING, NEW_FOLLOWER, COMMENT, etc.
  payload Json
  read Boolean @default(false)
  createdAt DateTime @default(now())
  profile Profile @relation(fields:[profileId], references:[id])
  @@index([profileId, read, createdAt])
}

// Ticket system
model Ticket {
  id           String     @id @default(uuid())
  reference    String     @unique         // ex: TCK_20250908_0001
  userId       String?
  user         User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  subject      String
  category     String
  priority     TicketPriority @default(MEDIUM)
  status       TicketStatus   @default(OPEN)
  isInternal   Boolean    @default(false) // visible uniquement pour support/admin
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // relations
  messages     TicketMessage[]
  attachments  TicketAttachment[]

  @@index([userId, status, priority, createdAt])
}

model TicketMessage {
  id         String   @id @default(uuid())
  ticketId   String
  ticket     Ticket   @relation(fields:[ticketId], references:[id], onDelete: Cascade)
  senderId   String?  // peut Ãªtre null (system)
  sender     User?    @relation(fields:[senderId], references:[id], onDelete: SetNull)
  body       String
  internal   Boolean  @default(false) // message interne (support)
  createdAt  DateTime @default(now())

  attachments TicketAttachment[]
  @@index([ticketId, senderId, createdAt])
}

model TicketAttachment {
  id         String  @id @default(uuid())
  ticketId   String
  messageId  String?   // si liÃ© Ã  un message
  filename   String
  url        String
  mimeType   String?
  size       Int?
  createdAt  DateTime @default(now())

  ticket     Ticket   @relation(fields:[ticketId], references:[id], onDelete: Cascade)
  message    TicketMessage? @relation(fields:[messageId], references:[id], onDelete: Cascade)
  @@index([ticketId, messageId])
}

model Email {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String

  email         String   @unique
  types         EmailType[]
  verified      Boolean  @default(false)
  isLoginAllowed Boolean @default(false)
  notifications Boolean @default(true)
  
  addedAt       DateTime @default(now())
  verifiedAt    DateTime?
  lastUsed      DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PostAudience {
  id       String @id @default(uuid())
  postId   String
  userId   String

  post     Post   @relation(fields: [postId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
}

model Session {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token         String   @unique
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  lastActivity  DateTime @default(now())
  isRevoked     Boolean  @default(false)
}

model SystemLog {
  id        String   @id @default(uuid())
  action    String   // Nom ou type d'action (ex: CLEANUP_VERIFICATION_CODES, BACKUP_DB, etc.)
  details   String?  // DÃ©tails complÃ©mentaires (facultatif)
  level     LogLevel @default(INFO) // Niveau du log
  createdAt DateTime @default(now())
}

enum PostVisibility {
  PUBLIC
  PRIVATE
  ONLY_FOLLOWERS
}

enum UserRole {
  USER
  SELLER
  ADMIN
  MODERATOR
  SUPPORT
  SUPER_ADMIN
}

enum PostStatus {
  PENDING    // En attente de modÃ©ration
  ACTIVE     // PubliÃ©e et active
  INACTIVE   // DÃ©sactivÃ©e par l'utilisateur
  EXPIRED    // ExpirÃ©e
  REJECTED   // RejetÃ©e par la modÃ©ration
  DELETED    // SupprimÃ©e
  APPROVED   // ApprouvÃ©e
}

enum DeliveryStatus { 
  PENDING 
  SENT 
  FAILED 
  READ
}

enum NotificationType {
  NEW_FOLLOWER
  NEW_LISTING
  COMMENT
}

enum PushNotificationType {
  NEW_FOLLOWER
  NEW_LISTING
  COMMENT
}

enum ShopStatus {
  PENDING   // en attente de validation
  APPROVED  // approuvÃ© par l'admin
  SUSPENDED // suspendu (comportement abusif, signalement, etc.)
  BANNED    // banni dÃ©finitivement
}

enum CodeType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  PHONE_VERIFICATION
  TWO_FACTOR_AUTH
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  PHONE_VERIFICATION
  TWO_FACTOR_AUTH
}

enum ProfileType {
  STANDARD
  BUSINESS
}

enum ConversationType {
  SUPPORT
  ANNOUNCE
}

enum ConversationStatus {
  OPEN
  PENDING
  CLOSED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EmailType {
  PRIMARY
  RECOVERY
  SECONDARY
  CONTACT
}

enum LogLevel {
  INFO
  WARNING
  ERROR
  CRITICAL
}

